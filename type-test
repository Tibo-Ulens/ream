(print type-of car) ;; (Function (List A) A)
(print type-of cdr) ;; (Function (List A) (List A))
(print type-of map) ;; (Function ((Function A B) (List A)) (List B))

(define-type Either (Sum (:Left A) (:Right B)))
(define-type Option (Sum (:Some A) :None))
(define-type Pair   (Product (:0 A) (:1 A)))

(:type map-option (Function ((Option A) (Function A B)) (Option B)))
(define map-option
	(lambda (opt f)
		(match opt
			(:Some x (f x))
			(:None :None))))

(:type largest-in-pair (Function (Pair Integer) Integer))
(define largest-in-pair
	(lambda pair
		(let (Pair :0 x :1 y) pair)
		(max x y)))

(:type list-length (Function (List A) Integer))
(define list-length
	(lambda lst
		(if (null? lst)
			0
			(+ 1 (list-length (cdr lst))))))

(print list-length ())                ;; 0
(print list-length ('a'))             ;; 1
(print list-length ('a' . 'b' . 'c')) ;; 3
(print list-length 3)                 ;; type error: expected `List A` found `Integer`

(:doc fib "Calculates the nth fibonacci number")
(:type fib (Function Integer Integer))
(define fib
	(lambda n
		(if (<= n 2)
			1
			(+
				(fib (- n 1))
				(fib (- n 2))))))

(print fib 10)    ;; 55
(print fib "foo") ;; type error: expected `Integer` found `String`
