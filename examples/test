(let a 1)

(begin
	(let a 3)
	a)

a

(let a 2)

a

(+ 1 2)

(let y 10)
(let foo (lambda x (+ x y)))

(foo 1) ;; 11

(begin
	(let y 10)
	(let foo (lambda x (+ x (+ y y))))

	(foo 2)) ;; 22

(begin
	(let y 30)
	(foo 3)) ;; 13

(+ 1 (if #true 2))

((lambda x x) 5)

(
	(
		(lambda x (x x))

		(lambda (fact-gen)
			(lambda n
				(if (== 0 n)
					1
					(* n ((fact-gen fact-gen) (- n 1)))))
		)
	)
5)

;; (letrec fact
;; 	(lambda (n)
;; 		(if (== n 0)
;; 			1
;; 			(* n (fact (- n 1))))))

;; (fact 5)

;; (let fib
;; 	(lambda n
;; 		(if (<= n 2)
;; 			1
;; 			(+
;; 				(fib (- n 1))
;; 				(fib (- n 2))))))

;; (fib 1)
