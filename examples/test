(let a 1)
(print a) ;; 1

(print (seq
	(let a 3)
	a)) ;; 3

(print a) ;; 1

(let a 2)
(print a) ;; 2

(print (+ 1 2)) ;; 3

(let y 10)
(let foo (lambda x (+ x y)))

(print (foo 1)) ;; 11

(fn bar x (+ x 3))

(print (bar 3)) ;; 6

(print (seq
	(let y 10)
	(let foo (lambda x (+ x (+ y y))))

	(foo 2))) ;; 22

(print (seq
	(let y 30)
	(foo 3))) ;; 13

(print (+ 1 (if #true 2))) ;; 3

(print ((lambda x x) 5)) ;; 5

(print
	(((lambda x (x x))
		(lambda (fact-gen)
			(lambda n
				(if (== 0 n)
					1
					(* n ((fact-gen fact-gen) (- n 1)))))))
	5)) ;; 120

(fn fact (n) (if (== n 0)
	1
	(* n (fact (- n 1)))))

(print (fact 5)) ;; 120

(fn fib (n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))

(print (fib 30))
